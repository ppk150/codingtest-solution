## DFS 

DFS는 탐색 알고리즘으로, 코딩테스트에 빈출되는 유형이라고 한다. 

사실 DFS, BFS, 부르트 포스 등등 탐색 알고리즘은 많지만, 코테로 나오면 사실상 DFS 하면 깔끔히 풀리는게 많다고 한다. (다만, 노드 끝에 원하는 답이 있는 가정 하에 (종종 탐색 레벨을 물어보는것은 BFS로 해야 함))

DFS는 재귀함수로 생각보다 간결하게 작성이 가능한데, 이것도 숙련되어야 한다. 

뭐 DFS만 들이대면 마스터키처럼 풀리는건 아니다. 그런데 "가성비"가 좋다. 

1\. 코딩테스트의 전체적인 난이도는 모르지만 탐색 문제가 나왓을 때 -> 간단하게 DFS 넣어보고 통과하면 다음문제로 

2\. 코딩테스트 테스트 케이스는 모르겟는데, 여튼 대부분의 상황에서 BFS보다는 빠르게 찾아야 한다 -> DFS에 운명을 건다. 

DFS / BFS에 관련한 개념은 어떤 백엔드 준비하는놈이 간단히 써 놓았다. 

[https://half-forty.tistory.com/77](https://half-forty.tistory.com/77)

 [JAVA\_코딩테스트 준비\_탐색 알고리즘\_(BFS/DFS)

BFS / DFS 그래프에서 탐색은 배열에서 나열된 요소들을 보는것과 달리 마치 무작위로 흩뿌려져 있는것들을 일일히 들여다 보는것과 비슷한 형태를 띈다. 그래서 특정한 값을 찾고 싶거나, 최단거

half-forty.tistory.com](https://half-forty.tistory.com/77)

### DFS 풀 때 유의점 

DFS는 주로 재귀함수를 사용해서 푼다고 한다. 

재귀함수를 잘 못써서 다른 방법을 찾았었느나(STACK으로 풀 수 있다고 한다. 그런데 단점이 많다. ) 그냥 재귀로 하는게 문제 풀 때 **가성비**가 더 좋다. 

\*\*스텍으로 풀면 단점 : 코드가 길어짐, 복잡해짐 + 경우에 따라 재귀보다 **탐색 속도가 늦어질 수 있다**고 함. 

그리고 재귀함수를 사용하는 이유중의 가장 큰 이유는 **"DFS 재귀 양식을 외워 놓으면 적용하기 쉽다."** 이다.

그리고 재귀함수를 사용하기 때문에 스텍오버플로우 오류를 조심해야 한다.   
\-> 특정 조건 (탐색 완료) 시에 재귀함수가 더이상 호출 안되게, 끝내게 해야함 .

재귀함수에 관련한것도 어떤 백수 취준생이 글이 써놨다. 

[https://half-forty.tistory.com/71](https://half-forty.tistory.com/71)

 [JAVA\_재귀함수

재귀함수 재귀함수, 이름만 보면 재귀? -> 반복? -> 돌아온다고? 재귀함수는 자기자신을 호출하는 함수다. 잉? 뭔 말이냐고? 먼제, 쉬운 비유를 의해 뱀 한마리를 등장시키겟다. 비얌이에여유 뱀은

half-forty.tistory.com](https://half-forty.tistory.com/71)

유의점은 이정도로 하고, 이제 문제를 풀어보자 

오늘은 이진트리를 탐색할것이다. 

### 트리 구조 

트리 구조는 토너먼트 판 마냥 생긴거를 프로그램에서 구현한건데, 이것도 또 어떤 백수새끼가 잘 써놧다. 

[https://half-forty.tistory.com/74](https://half-forty.tistory.com/74)

 [JAVA\_자료구조\_트리(Tree)

Tree Tree(트리)는 말 그대로 나무와 비슷한 형태를 가진 자료구조이다. 그런데 우리가 아는 나무가 아니고, 거꾸로 서있는 나무 모양이다. (약간, 토너먼트 대진표랑 비슷한 형태라고 생각하면 된

half-forty.tistory.com](https://half-forty.tistory.com/74)

[https://half-forty.tistory.com/76](https://half-forty.tistory.com/76)

 [JAVA\_자료구조\_(Binary Search Tree, 트리 순회)

1\. Binary Search Tree 트리구조는 편리한 구조를 전시하는것 이외에 효율적인 탐색을 위해 사용되기도 한다. 대표적으로 이진 트리가 있다. 이진 트리는 자식 노드가 최대 2개씩만 존재하는 노드로

half-forty.tistory.com](https://half-forty.tistory.com/76)

우리가 풀 트리는 이중 이진 트리로, 두번째 링크를 참조하면 좋다. 

### 예제 문제 - 이진트리순회 

[##_Image|kage@AEcsP/btrZV7tf9Yr/aiTPJErOEULC4dQAakP2M0/img.png|CDM|1.3|{"originWidth":922,"originHeight":545,"style":"alignCenter","caption":"이진 트리 예시"}_##]

위와같은 7개의 요소를 가진 이진 트리가 있다. 

이를 순회하는 DFS를 만들어 보자. 

\*\* 위 그림에서 전위, 준위 후위 순회

-   전위 순회 : 1 2 4 5 3 6 7 
-   중위 순회 : 4 2 5 1 6 3 7
-   후위 순회 : 4 5 2 6 7 3 1 

먼저 알아야 할 게 기본적으로 전위 순회를 기준으로 설명 할 것이다. 

[##_Image|kage@CYY6f/btrZ7FvmWt7/78cAdgUdSZRgK4VJjVgT5K/img.gif|CDM|1.3|{"originWidth":720,"originHeight":405,"style":"alignCenter","caption":"전위순회 예시 (출처 : 코드스테이츠)"}_##]

그냥 위에서부터 아래로 훝으면서 내려온다 라고 생각하고 보자. 

트리를 순회 할 때 봐야 하는게, 노드가 갈래로 나와 있는 부분이 있다. 

갈래로 나와 있는 노드를 지나서, 말단노드로 가면, 말단노드의 또다른 자식노드로 옮겨가면서 탐색을 해야 한다.  
\-> 왼쪽, 오른쪽  봐주는게 필요하다. 

또한, 트리 탐색이 끝나는 기준을 만들어야 한다. 

지금 예제에서는 위의 숫자로 만든 이진 트리를 탐색하지만, 실질적으로 위의 전위순회 예시(알파벳으로 된 움짤) 과 같은 형태이다. 

다만, 가장 아래의 노드들에 null값을 넣어서 만들어서 null값을 만나면 그 노드에 대한 탐색을 멈추는 것으로 한다. 

### 코드 예시 

```
class Node{ // 노드 설정해주는 클래스
    int data;
    Node lt , rt ; // 노드의 자식노드 lt:왼쪽 자식노드 , rt : 오른쪽 자식노드
    public Node (int val){
        data = val;
        lt=rt=null; // 왼쪽, 오른쪽 자식노드를 null 초기값으로 넣음
                    // 이렇게 만들어 놓으면, 말단 노드 부분에서 null값이 들어간 자식노드가 생기는데, 이걸 이용해서 dfs 멈춤

    }
}
public class BIDFS {

    Node root;
    public  void DFS(Node root){

        if(root == null){ // 노드 값이 null 이면
            return; // 고냥 종료
        }else{            // null 값이 아니면 DFS 시작

            System.out.print(root.data + " ");  // 탐색한 노드 출력  // 재귀함수 위에 쓰면 전위 순회
            DFS(root.lt); // 왼쪽 노드 탐색
//            System.out.print(root.data + " ");  // 탐색한 노드 출력  // 왼쪽 노드 방문 후 출력 하면 중위 순회
            DFS(root.rt); // 오른쪽 노드 탐색
//            System.out.print(root.data + " ");  // 탐색한 노드 출력  // 왼쪽 노드 , 오른쪽 노드 방문 후 출력 하면 후위 순회

        }
    }


    public static void main(String[] args) {

        BIDFS tree =new BIDFS();        //1(루트)~7 를 가지는 이진 트리 생성 (일일히 숫자 넣은거임)
        tree.root = new Node(1);
        tree.root.lt = new Node(2);
        tree.root.rt = new Node(3);
        tree.root.lt.lt = new Node(4);
        tree.root.lt.rt = new Node(5);
        tree.root.rt.lt = new Node(6);
        tree.root.rt.rt = new Node(7);
        tree.DFS(tree.root);

    }
}
```

위의 코드에서 Node 클래스는 tree 자료형에 넣어주기 위한 세팅으로, 왼쪽 자식노드, 오른쪽 자식노드를 세팅 해주는 것이라고 보면 된다. 

아래쪽에 줄줄줄 숫자 넣은게 이진 트리 만들어 준건데, 1~7 까지 생성 되어 있지만 가장 끝 노드 (4, 5, 6, 7)에 사실 null 값을 가진 노드(왼쪽 자식노드, 오른쪽 자식노드)가 또 붙어 있는 상태이다. 

[##_Image|kage@H9SA1/btrZ7buEESK/wnRt6oPnMFhgALaPSHok21/img.png|CDM|1.3|{"originWidth":993,"originHeight":542,"style":"alignCenter","caption":"이캐캐 마지막에 null 이 붙어있다."}_##]

null 값을 만나면, 해당 노드에는 볼일 없는것이다. 다시 돌아가서 탐색하게 해야한다.

여기서 핵심코드는 바로 이것이다. 

```
public  void DFS(Node root){

    if(root == null){ // 노드 값이 null 이면
        return; // 고냥 종료
    }else{            // null 값이 아니면 DFS 시작

        System.out.print(root.data + " ");
        DFS(root.lt); // 왼쪽 노드 탐색
        DFS(root.rt); // 오른쪽 노드 탐색


    }
}
```

DFS 재귀 함수 안을 보면 null값 (노드의 값)을 만나면 종료하게 되는데, 프로그램 종료가 아니거, 밑으로 내려가면서 탐색하는것을 멈춘다고 보면 된다. 

그리고 아래의 

```
DFS(root.lt); // 왼쪽 노드 탐색
DFS(root.rt); // 오른쪽 노드 탐색
```

를 보면 왼쪽 먼저 탐색 후 오른쪽을 탐색 하게 했는데, 함수 안에 또 함수를 호출 했으니 재귀 함수로 작동이 되고 있는 것이다. 

즉

```
DFS(root.lt); // 왼쪽 노드 탐색
```

부분을 실행하면 

왼쪽 노드로 가서 탐색  -> null 이 아님 -> 왼쪽 노드로 가서 탐색 -> null 이 아님 -> 왼쪽 노드로 가서 탐색.....

혹은 

왼쪽 노드로 가서 탐색(2번 노드)-> null 이 아님-> 왼쪽 노드로 가서 탐색(4번 노드) -> null 이 아님 -> 왼쪽 노드로 가서 탐색(4번 노드의 왼쪽 자식노드 ) \-> null임 -> 오른쪽 노드로 가서 탐색(4번 노드의 왼쪽 자식노드 ) ->  null임 ->   탐색 종료 (**2번 노드에 머물게 됨**)

이 때 탐색이 종료되는데, 종료된 시점에서 탐색하는 노드는 2번이 되므로, 

```
DFS(root.rt); // 오른쪽 노드 탐색
```

**2번 노드에서부터 오른쪽(5번 노드)**을 탐색하게 된다.

이때, 재귀 함수 동작으로 또 5번 노드의 왼쪽을 탐색하고 -> null임 -> 오른쪽을 탐색하고 -> null 임  -> 탐색을 종료한다 

이때 탐색이 종료되고 **루트 노드 1로 돌아온다.**

왜 되돌아 오는가????

재귀함수는 **스텍 메모리**에 쌓이면서 동작한다. 

자료구조 스텍(STACK) 에 관해 백수가 글 

[https://half-forty.tistory.com/72](https://half-forty.tistory.com/72)

 [JAVA\_자료구조\_스텍(Stack)

자료구조 자료구조란 쉽게 말해서 일종의 주머니다. 우리가 intm String등등의 자료를 사용 했는데 이들 모두 자료구조의 일종이다. 한개의 값을 가질때는 단순구조인 int, char 형 변수 등이 사용되

half-forty.tistory.com](https://half-forty.tistory.com/72)

지금까지 사실 그냥 탐색하고 지나가는줄 알았지만, 재귀함수가 동작하면서 스텍 메모리에 쌓인 거다

[##_Image|kage@bWzOlh/btrZ77yrOL7/zcAFSl3i1kEJFPKh3T6v21/img.png|CDM|1.3|{"originWidth":1025,"originHeight":585,"style":"alignCenter","caption":"현 시점의 경로, 1 - 2 - 5 순으로 탐색 함"}_##]

이때, 이미 5번의 왼쪽은 탐색했다가 종료되서 스템 메모리에서 빠져나가서 사실 1 왼쪽, 2 오른쪽, 5 오른쪽 조회가 스텍 메모리에 들어간다. 

[##_Image|kage@cevY5I/btrZ8N0Mx26/TAXkvwBUCbjx776Vo2Kpjk/img.png|CDM|1.3|{"originWidth":192,"originHeight":144,"style":"alignCenter","caption":"1 왼 , 2 오, 5 오 -&gt; null값 종료"}_##]

5의 오른쪽은 null 값이므로 종료되면서 스텍 메모리에서 빠져나가는데, 스텍은 최근에 들어간놈이 먼저 나오므로 5 오른쪽 보고 빠져나가면 

[##_Image|kage@BfTZu/btrZ2zXkBsO/SVnn8Xro7X4PrFcQhffy41/img.png|CDM|1.3|{"originWidth":212,"originHeight":149,"style":"alignCenter","caption":"이캐캐"}_##]

2 오른쪽에 가고, 이게 실행되면 또 빠져나가서 

[##_Image|kage@sbSiS/btrZ85AnJge/BckY2AFB6Wn4UbgMjfqCxk/img.png|CDM|1.3|{"originWidth":195,"originHeight":138,"style":"alignCenter","caption":"1 왼쪽 보는것만 남음"}_##]

**1 왼쪽 보는 부분**만 남게 된다. 

이걸 실행하면 루트인 1 을 넣은 함수가 실행 되는건데, 이게 실행 되고 나면 또 **1의 오른쪽을 바로 보게 된다**

#### _**"아니 왜 그러냐고?"**_

정답은 이 앙칼진 코드에 있다.

```
DFS(root.lt); // 왼쪽 노드 탐색
DFS(root.rt); // 오른쪽 노드 탐색
```

우리가 왼쪽 먼저 보게 했는데, 위의 스텍 메모리에서 1 왼쪽 보는 함수가 끝나면 바로 

```
DFS(root.rt); // 오른쪽 노드 탐색
```

코드가 실행된다. (1의 오른쪽 보는 함수)

1의 오른쪽을 보면? 3 이다! 

이때 3에서 또 재귀 함수가 걸려서 

```
DFS(root.lt); // 왼쪽 노드 탐색
DFS(root.rt); // 오른쪽 노드 탐색
```

이 부분이 실행 되는데, 왼쪽 보는 함수 

```
DFS(root.lt); // 왼쪽 노드 탐색
```

가 위에 있기 때문에 왼쪽부터 또 보는것이다!

이후, 다시 착실히 **스텍 메모리에 재귀함수를 쌓아가면서 실행**되는 것이다. 

이제 이진 트리 DFS 설명은 다 했다. 

부가적으로 중위, 후위 순회도 동작 순서는 같은데, 스텍 메모리 특성상 **"나중에 쌓인 녀석이 먼저 작동"**하기 때문에

-   출력하는 부분을 **스텍 메모리에 넣기전에** 출력하느냐 - 전위 순회 
-   **오른쪽을 탐색하기 위해 스텍메모리에 넣을 때(스텍 메모리에 넣는 도중에)** 출력하느냐 - 중위 순회 
-   스텍 메모리에 다 넣고 **메모리에서 뺄 때** 출력하느냐 - 후위 순회

에 따라 전위, 중위, 후위 순회 출력이 달라진다. 

하지만 **기본적으로 재귀함수가 스텍 메모리에 쌓이는 순서는 똑같다.**

이제 이 부분을 이해하고, 위의 재귀함수 패턴을 외우거나 기억해서 예제를 풀면서 숙련도를 높이자. 

**PS: 사실 DFS 를 배운건 좀 됫었는데, 이게 뭐 탐색 방식만 배웟지 코드로 설명을 들은적이 없었다.**

**다른 블로그 봐도 뭔, 코드 띡 써놓고 _"짜잔! DFS완성!"_ 이런식으로 끝나고...** 

**계속 공부하다보니 스텍 메모리 특성을 잘 파악하고 동작방식을 직접 그려보니까 이해가 갔다. 그래서 코드도 이해가 갔다.**

**공부하는데 검색에 대한 숙련도도 높이고 블로깅 숙련도도 높여야 겠다...** 

**의외로 참고하려고 검색해 보면 _"이 사람 이거 이해하고 쓴 글이 맞나?"_ 싶은 글도 있고.....**  
**(내가 그 글을 이해 못햇을 가능성도 있음, 사실 이해 못했을 가능성이 큼 ㅎ)** 

**적어도 DFS를 검색해서 내 글이 나온다면, 매우 기초적인 수준에서는 내 글이 조금 더 세세하게(?) 초심자가 이해 하기 쉽게 써놓은것 같다...** 

**아니면 나도 _"이 사람 이거 이해하고 쓴 글이 맞나?"_  라는 느낌을 줄 수도 있고....** 

**나는 코드를 봐도 DFS를 이해 못했었다.** 

**혹시라도, 나처럼 DFS를 이해 하는데 어려움을 겪는 사람이 이 글을 보고 도움이 되었으면 한다.**
